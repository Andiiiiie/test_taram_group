Notes test technique

Partie React:
- technologie next js 
- donnees stockee dans un fichier .json dans le lieu devra etre donnee dans .env en cas de changement 
- Organisation de code :
	- dans le dossier src :
		- dossier components : pour mettre les composants reuitilisable 
		- pages :
			- pour la gestion de route automatique de next js
			- ici on va mettre les fichiers des pages :  ici articles.js
			- sous dossier API pour gerer le back : avec API routes nous gerons le backend dans le meme projet 
		- services:dossier ou on met les services pour interagir avec la bdd (ici un fichier json )
		- tests : pour realiser les tests 
- notes :
	- le traitement (filtre / recherche/ ...) se fait dans l'API pour pouvoir s'adapter si plus tard on recupere les donnes depuis un autre service ou source  


- Librairies utilisees:
	- bootstrap pour acceler le developpement et avoir un front responsive 
	
	

Pour le test:
npm install --save-dev jest supertest @types/jest

On a utiliser pour  realiser un test unitaire 
J’ai choisi d’utiliser Babel pour mes tests avec Jest afin de pouvoir exploiter la syntaxe moderne d’ES Modules (import/export) dans l’ensemble de mon projet. Cela permet de maintenir une cohérence entre le code de production et le code de test, tout en bénéficiant des dernières fonctionnalités JavaScript sans avoir à les transformer manuellement. Babel assure ainsi une compatibilité complète avec Jest et simplifie l’écriture et la maintenance des tests.
	

Test fastapi:
utilisation de pytest pour tester l'endpoint /chat :
	- le fichier test ce trouve dans le dossier python-service dans le dossier tests 
	
librairies utilisees :

-next js : jest et supertest pour realiser le test , bootstrap pour la mise en forme, babel ,dotenv pour lire le .env ,  

-fastapi : pytest pour les tests , scikit-learn pour la recherche dans le json , httpx 

andieBe2025!
